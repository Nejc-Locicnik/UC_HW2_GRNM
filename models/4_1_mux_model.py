import numpy as np 

def solve_model(T,state):
    X1, X2, X3, X4, S1, S2, MUX = state
    dX1 = -X1*0
    dX2 = -X2*0
    dX3 = -X3*0
    dX4 = -X4*0
    dS1 = -S1*0
    dS2 = -S2*0
    dMUX = -MUX*0.1+10*(((X1/5)**2))/(1+((X1/5)**2)+((S1/5)**3)+((S2/5)**3)+((X1/5)**2)*((S1/5)**3)+((X1/5)**2)*((S2/5)**3)+((S1/5)**3)*((S2/5)**3)+((X1/5)**2)*((S1/5)**3)*((S2/5)**3))+10*(((X2/5)**2)*((S1/5)**3))/(1+((X2/5)**2)+((S1/5)**3)+((S2/5)**3)+((X2/5)**2)*((S1/5)**3)+((X2/5)**2)*((S2/5)**3)+((S1/5)**3)*((S2/5)**3)+((X2/5)**2)*((S1/5)**3)*((S2/5)**3))+10*(((X3/5)**2)*((S2/5)**3))/(1+((X3/5)**2)+((S1/5)**3)+((S2/5)**3)+((X3/5)**2)*((S1/5)**3)+((X3/5)**2)*((S2/5)**3)+((S1/5)**3)*((S2/5)**3)+((X3/5)**2)*((S1/5)**3)*((S2/5)**3))+10*(((X4/5)**2)*((S1/5)**3)*((S2/5)**3))/(1+((X4/5)**2)+((S1/5)**3)+((S2/5)**3)+((X4/5)**2)*((S1/5)**3)+((X4/5)**2)*((S2/5)**3)+((S1/5)**3)*((S2/5)**3)+((X4/5)**2)*((S1/5)**3)*((S2/5)**3))
    return np.array([dX1, dX2, dX3, dX4, dS1, dS2, dMUX])

def solve_model_steady(state):
    return solve_model(0, state)
